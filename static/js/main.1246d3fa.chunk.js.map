{"version":3,"sources":["Typer.js","typerData.js","EnKrSwitch.js","Wpms.js","App.js","serviceWorker.js","index.js"],"names":["Typer","props","componentDidMount","focusTyperInput","handleKeyDown","e","key","typerInput","current","value","length","typerText","onTypingComplete","handleTyperInputChange","state","typingStarted","onTypingStart","setState","inputText","target","nextPlaceHolderText","mergeTypingChar","placeholderText","overlapText","originalText","substring","focus","React","createRef","overlapChar","charColor","style","color","replace","i","this","push","id","className","type","onChange","onKeyDown","ref","Component","typerData","en","kr","EnKrSwitch","useState","selectedLang","checkedLang","setCheckedLang","onSwitch","currentTarget","checked","onSwitchChange","name","htmlFor","Wpms","wpms","map","wpm","strWpm","toString","substr","indexOf","App","_countWordsInSentence","sentence","split","handleSwitchChanged","dataIndex","passingData","handleTypingStart","startTimes","Date","getTime","handleTypingComplete","typingTime","console","log","handleEnterDown","refreshPage","_getAvgWpm","sumWpm","avgWpm","count","isNaN","render","renderingPage","undefined","display","flexDirection","onClick","fontSize","padding","margin","border","borderRadius","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1246d3fa.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Typer.css';\n\nclass Typer extends Component {\n  constructor(props) {\n    super(props);\n    this.typerInput = React.createRef();\n    this.state = {\n      placeholderText: this.props.typerText,\n      overlapText: '',\n      typingStarted: false,\n    };\n  }\n\n  componentDidMount = () => {\n    this.focusTyperInput();\n  };\n\n  handleKeyDown = (e) => {\n    if (e.key === 'Enter') {\n      if (this.typerInput.current.value.length >= this.props.typerText.length) {\n        this.props.onTypingComplete();\n      }\n    }\n  };\n\n  handleTyperInputChange = (e) => {\n    if (!this.state.typingStarted) {\n      this.props.onTypingStart();\n      this.setState({\n        typingStarted: true,\n      });\n    }\n    const inputText = e.target.value;\n    if (inputText.length > this.props.typerText.length) {\n      this.props.onTypingComplete();\n    }\n    const nextPlaceHolderText = this.mergeTypingChar(\n      inputText,\n      this.props.typerText\n    );\n    this.setState({ placeholderText: nextPlaceHolderText });\n    this.setState({ overlapText: inputText });\n  };\n\n  mergeTypingChar = (inputText, originalText) => {\n    const leftText = originalText.substring(0, inputText.length - 1);\n    const inputingText = inputText ? inputText[inputText.length - 1] : '';\n    const rightText = originalText.substring(\n      inputText.length,\n      originalText.length\n    );\n\n    return leftText + inputingText + rightText;\n  };\n\n  focusTyperInput = () => {\n    this.typerInput.current.focus();\n  };\n\n  render() {\n    const overlapChar = (key, charColor) => {\n      return (\n        <span key={key} style={{ color: charColor }}>\n          {this.state.overlapText[key].replace(/ /g, '\\u00a0')}\n        </span>\n      );\n    };\n\n    let overlapText = [];\n    for (let i = 0; i < this.state.overlapText.length; i++) {\n      if (i === this.state.overlapText.length - 1) {\n        overlapText.push(overlapChar(i, `#003049`));\n        continue;\n      }\n      if (this.state.placeholderText[i] === this.state.overlapText[i]) {\n        overlapText.push(overlapChar(i, `#2a9d8f`));\n      } else {\n        overlapText.push(overlapChar(i, `#e76f51`));\n      }\n    }\n\n    return (\n      <div id=\"typer\">\n        <div className=\"typer typer-text\">{this.props.typerText}</div>\n        <div className=\"typer-wrap\">\n          <input\n            type=\"text\"\n            className=\"typer typer-input\"\n            onChange={this.handleTyperInputChange}\n            onKeyDown={this.handleKeyDown}\n            ref={this.typerInput}\n          />\n          <div className=\"typer typer-text-placeholder\">\n            {this.state.placeholderText.replace(/ /g, '\\u00a0')}\n          </div>\n          <div className=\"typer typer-text-overlap\">{overlapText}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Typer;\n","const typerData = {\n  en: [\n    `How happy is the blameless vestal's lot!`,\n    `The world forgetting, by the world forgot.`,\n    `Eternal sunshine of the spotless mind!`,\n    `Each pray'r accepted, and each wish resign'd`,\n    `Alexander Pope`,\n  ],\n  kr: [\n    '서시',\n    '윤동주',\n    '죽는 날까지 하늘을 우러러',\n    '한점 부끄럼이 없기를,',\n    '잎새에 이는 바람에도',\n    '나는 괴로워 했다.',\n    '별을 노래하는 마음으로',\n    '모든 죽어가는 것을 사랑해야지',\n    '그리고 나한테 주어진 길을',\n    '걸어가야겠다.',\n    '',\n    '오늘밤에도 별이 바람에 스치운다.',\n  ],\n};\n\nexport default typerData;\n","import React, { useState } from 'react';\nimport './EnKrSwitch.css';\n\nconst EnKrSwitch = (props) => {\n  const [checkedLang, setCheckedLang] = useState(props.selectedLang);\n\n  const onSwitch = (e) => {\n    if (e.currentTarget.checked) {\n      const selectedLang = e.currentTarget.value;\n      setCheckedLang(selectedLang);\n      props.onSwitchChange(selectedLang);\n    }\n  };\n\n  return (\n    <div className=\"en-kr-switch\">\n      <input\n        type=\"radio\"\n        name=\"en-kr-radio\"\n        id=\"radio-check-en\"\n        className=\"en-kr-radio\"\n        checked={checkedLang === 'en'}\n        onChange={onSwitch}\n        value=\"en\"\n      />\n      <label htmlFor=\"radio-check-en\" id=\"radio-label-en\">\n        En\n      </label>\n      <input\n        type=\"radio\"\n        name=\"en-kr-radio\"\n        id=\"radio-check-kr\"\n        className=\"en-kr-radio\"\n        checked={checkedLang === 'kr'}\n        onChange={onSwitch}\n        value=\"kr\"\n      />\n      <label htmlFor=\"radio-check-kr\" id=\"radio-label-kr\">\n        Kr\n      </label>\n    </div>\n  );\n};\n\nexport default EnKrSwitch;\n","import React from 'react';\nimport './Wpms.css';\n\nconst Wpms = (props) => {\n  const wpms = props.wpms;\n\n  return (\n    <div className=\"wpm-list\">\n      {wpms.map((wpm) => {\n        let strWpm = wpm.toString();\n        return (\n          <p className=\"wpm\">wpm: {strWpm.substr(0, strWpm.indexOf('.'))}</p>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Wpms;\n","import React from 'react';\nimport Typer from './Typer';\nimport typerData from './typerData';\nimport EnKrSwitch from './EnKrSwitch';\nimport Wpms from './Wpms';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedLang: 'kr',\n      dataIndex: 0,\n      passingData: typerData['kr'][0],\n      startTimes: [],\n      wpms: [],\n    };\n  }\n\n  _countWordsInSentence = (sentence) => {\n    let words = sentence.split(' ');\n    return words.length;\n  };\n\n  handleSwitchChanged = (selectedLang) => {\n    this.setState({\n      selectedLang: selectedLang,\n      dataIndex: 0,\n      passingData: typerData[selectedLang][0],\n    });\n  };\n\n  handleTypingStart = () => {\n    this.setState({\n      startTimes: [...this.state.startTimes, new Date().getTime()],\n    });\n  };\n\n  handleTypingComplete = () => {\n    let typingTime =\n      new Date().getTime() - this.state.startTimes[this.state.dataIndex];\n    let words = this._countWordsInSentence(this.state.passingData);\n    let wpm = (words * 60000) / typingTime;\n    this.setState(\n      {\n        dataIndex: this.state.dataIndex + 1,\n        passingData:\n          typerData[this.state.selectedLang][this.state.dataIndex + 1],\n        wpms: [...this.state.wpms, wpm],\n      },\n      () => {\n        console.log(this.state.wpms);\n      }\n    );\n  };\n\n  handleEnterDown = (e) => {\n    if (e.key === 'Enter') {\n      this.refreshPage();\n    }\n  };\n\n  refreshPage = () => {\n    this.setState({\n      selectedLang: this.state.selectedLang,\n      dataIndex: 0,\n      passingData: typerData[this.state.selectedLang][0],\n      startTimes: [],\n      wpms: [],\n    });\n  };\n\n  _getAvgWpm = (wpms) => {\n    let sumWpm = 0;\n    let avgWpm = 0;\n    let count = 0;\n    wpms.map((wpm) => {\n      if (!isNaN(wpm) && wpm !== 0) {\n        count++;\n        sumWpm += wpm;\n      }\n    });\n    console.log(sumWpm, count);\n    avgWpm = sumWpm / count;\n    avgWpm = avgWpm.toString();\n    avgWpm = avgWpm.substr(0, avgWpm.indexOf('.'));\n    return avgWpm;\n  };\n\n  render = () => {\n    let renderingPage;\n    if (this.state.passingData !== undefined) {\n      renderingPage = (\n        <div className=\"App\">\n          <Wpms wpms={this.state.wpms} />\n          <EnKrSwitch\n            selectedLang={this.state.selectedLang}\n            onSwitchChange={this.handleSwitchChanged}\n          />\n          <Typer\n            onTypingStart={this.handleTypingStart}\n            onTypingComplete={this.handleTypingComplete}\n            key={this.state.passingData}\n            typerText={this.state.passingData}\n          />\n        </div>\n      );\n    } else {\n      let avgWpm = this._getAvgWpm(this.state.wpms);\n      renderingPage = (\n        <div\n          className=\"App\"\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <p>Avg wpm: {avgWpm}</p>\n          <p>Well Done!</p>\n          <input\n            type=\"button\"\n            onClick={this.refreshPage}\n            onKeyDown={this.handleEnterDown}\n            style={{\n              fontSize: '1rem',\n              padding: '.3rem 1rem',\n              display: 'block',\n              margin: '1rem',\n              border: '2px solid black',\n              borderRadius: '2px',\n            }}\n            value=\"return\"\n          />\n        </div>\n      );\n    }\n\n    return <>{renderingPage}</>;\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}